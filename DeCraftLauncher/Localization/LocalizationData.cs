using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;

namespace DeCraftLauncher.Localization
{
    public class LocalizationData
    {
        public Dictionary<string, string> localizationKeys = new Dictionary<string, string>
        {
            {"btn.runtime_settings", "Runtime settings"},
            {"btn.advanced_settings", "Advanced settings"},
            {"btn.rescan_entry_points", "Rescan entry points"},
            {"l.launch_options", "Launch options"},
            {"l.jar_files", ".jar files"},
            {"l.entry_points", "Entry points"},
            {"l.jvm_options", "JVM options"},
            {"l.player_name", "Player name"},
            {"l.lwjgl_version", "LWJGL Version"},
            {"l.proxy_host", "Proxy host"},
            {"l.instance_directory", "Instance directory"},
            {"l.window_size", "Window size"},

            {"btn.ui.entry_point_adv_remove_custom_command", "Remove..."},
            {"btn.ui.entry_point_adv_applet_parameters", "Parameters..."},
            {"l.ui.searching_entry_points", "Searching classes for entry points..."},
            {"l.ui.entry_point_desc_direct_launch", "Launch the game directly."},
            {"l.ui.entry_point_desc_launch_applet", "Launch the game as a Java applet."},
            {"l.ui.entry_point_desc_launch_server", "Launch a server."},
            {"l.ui.entry_point_desc_launch_isom", "Open an applet that lets you view your worlds in an isometric view."},
            {"l.ui.entry_point_desc_launch_jarloader", "Launch using a loader that will load its own dependencies."},
            {"l.ui.entry_point_desc_launch_rmcp_wrapper", "Launch using a default wrapper generated by RetroMCP."},
            {"l.ui.entry_point_desc_onesix_unsupported", "1.6+ launch class. Not supported by this launcher."},
            {"l.ui.entry_point_desc_unknown", "<unknown>"},
            {"l.ui.entry_point_type_unknown", "<unknown>"},
            {"l.ui.entry_point_type_main_function", "(main function)"},
            {"l.ui.entry_point_type_applet", "(Applet)"},
            {"l.ui.entry_point_type_custom_command", "(custom launch command)"},

            {"btn.ui.window_custom_launch_add", "Add"},
            {"l.ui.window_add_custom_launch", "Add custom launch option"},
            {"l.ui.window_custom_launch_fullcommand", "Full command:"},

            {"l.ui.window_select_java", "Select Java version"},
            
        };

        public Dictionary<string, string> nameToLocResourceBinding = new Dictionary<string, string>()
        {
            {"English", DeCraftLauncher.Properties.Resources.LocEnglish}
        };

        public void InitLocalization()
        {
            string locName = "English";
            if (nameToLocResourceBinding.ContainsKey(locName)) {
                foreach (string line in nameToLocResourceBinding[locName].Split('\n'))
                {
                    if (line.Contains("="))
                    {
                        string l2 = line;
                        if (l2.EndsWith("\r"))
                        {
                            l2 = l2.Split('\r')[0];
                        }
                        string[] splt = l2.Split('=');
                        localizationKeys[splt[0]] = splt[1];
                    }
                }
            }
        }

        public void DebugSaveDefaultLoc(string a)
        {
            File.WriteAllLines(a, (from x in localizationKeys
                                   select $"{x.Key}={x.Value}"));
        }

        public string GetLocString(string key)
        {
            return localizationKeys[key];
        }

        public void Localize(Dictionary<object, string> locKeys)
        {
            foreach (KeyValuePair<object, string> obj in locKeys)
            {
                if (!localizationKeys.ContainsKey(obj.Value))
                {
                    continue;
                }

                if (obj.Key is Button)
                {
                    ((Button)obj.Key).Content = localizationKeys[obj.Value];
                }
                else if (obj.Key is Label)
                {
                    ((Label)obj.Key).Content = localizationKeys[obj.Value];
                }
                else if (obj.Key is TextBlock)
                {
                    ((TextBlock)obj.Key).Text = localizationKeys[obj.Value];
                } 
                else
                {
                    Console.WriteLine($"LOCALIZATION NOT IMPLEMENTED: {obj.Key.GetType()}");
                }
            }
        }
    }
}
